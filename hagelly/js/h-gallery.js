// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.HGallery = (function(_super) {
    __extends(HGallery, _super);

    function HGallery(containerId, images, rowHeight, containerMargin) {
      var _this = this;

      this.containerId = containerId;
      this.images = images;
      this.rowHeight = rowHeight;
      this.containerMargin = containerMargin;
      HGallery.__super__.constructor.call(this);
      this.$gContainer = $("#" + this.containerId).empty();
      this.gImages = [];
      this.gRows = [];
      this.images.forEach(function(image) {
        var $img;

        $img = $("<img src='" + image.uri + "' alt=''>");
        return $img.height(_this.rowHeight).load(function() {
          return _this.pushGImage(_this.createGImage($img, image));
        });
      });
      $(window).resize(function() {
        return _this.refresh();
      });
    }

    HGallery.prototype.refresh = function() {
      var lastGRows,
        _this = this;

      lastGRows = this.gRows;
      this.gRows = [];
      this.gImages.forEach(function(gImage) {
        return _this.pushGImage(gImage);
      });
      lastGRows.forEach(function(gRow) {
        return gRow.remove();
      });
      if (this.gSelected) {
        this.gSelected.$img.click();
      }
      return this;
    };

    HGallery.prototype.createGRow = function() {
      var gRow;

      gRow = new GRow(this.$gContainer, this.containerMargin);
      this.gRows.push(gRow);
      return gRow;
    };

    HGallery.prototype.createGImage = function($img, data) {
      var gImage,
        _this = this;

      gImage = new GImage($img, data);
      $img.click(function() {
        _this.gSelected = gImage;
        _this.trigger("gImageSelected", [gImage, data]);
        $(".full-view-container").remove();
        return $("<div class=\"full-view-container\">\n  <img class=\"full-view-image\" src=\"" + gImage.src + "\">\n</div>").insertBefore(gImage.gRow.$row)[0].scrollIntoView();
      });
      this.gImages.push(gImage);
      return gImage;
    };

    HGallery.prototype.pushGImage = function(gImage) {
      this.lastGRow().push(gImage);
      if (this.lastGRow().contentWidth > this.lastGRow().width) {
        if (this.lastGRow().width < this.previousGRow().width) {
          this.gRows.forEach(function(gRow) {
            return gRow.align();
          });
        } else {
          this.lastGRow().align();
        }
        this.createGRow();
      }
      return this;
    };

    HGallery.prototype.empty = function() {
      return !this.gRows.length;
    };

    HGallery.prototype.lastGRow = function() {
      if (this.empty()) {
        this.createGRow();
      }
      return this.gRows[this.gRows.length - 1];
    };

    HGallery.prototype.previousGRow = function() {
      if (this.gRows.length > 1) {
        return this.gRows[this.gRows.length - 2];
      } else {
        return this.lastGRow();
      }
    };

    return HGallery;

  })(EventDispatcher);

  this.GRow = (function() {
    function GRow($gContainer, imgContainerMargin) {
      this.$gContainer = $gContainer;
      this.imgContainerMargin = imgContainerMargin;
      this.$row = $("<div class='images-row'></div>").appendTo(this.$gContainer);
      this.setWidth(this.$gContainer.width());
      this.gImages = [];
      this.contentWidth = 0;
    }

    GRow.prototype.setWidth = function(width) {
      this.$row.width(width);
      this.width = width;
      return this;
    };

    GRow.prototype.append = function(gImage) {
      return gImage.appendTo(this);
    };

    GRow.prototype.push = function(gImage) {
      this.append(gImage);
      this.gImages.push(gImage);
      this.contentWidth += gImage.width + this.imgContainerMargin;
      return this;
    };

    GRow.prototype.align = function() {
      var alpha, imagesWidth, margin,
        _this = this;

      this.setWidth(this.$gContainer.width());
      margin = this.imgContainerMargin * this.gImages.length;
      imagesWidth = this.contentWidth - margin;
      alpha = 1.0 * (this.width - margin) / imagesWidth;
      this.gImages.forEach(function(gImage) {
        gImage.$imgContainer.width(Math.floor(gImage.width * alpha));
        return gImage.$img.css("margin-left", -Math.floor(gImage.width * (1.0 - alpha) / 2));
      });
      return this;
    };

    GRow.prototype.remove = function() {
      return this.$row.remove();
    };

    return GRow;

  })();

  this.GImage = (function() {
    function GImage($img, data) {
      this.$img = $img;
      this.data = data;
      this.$imgContainer = $("<div class='image-container'></div>");
      this.$imgContainer.append(this.$img);
      this.src = this.$img.attr("src");
    }

    GImage.prototype.appendTo = function(gRow) {
      this.gRow = gRow;
      this.gRow.$row.append(this.$imgContainer);
      this.width = this.$img.width();
      return this;
    };

    return GImage;

  })();

}).call(this);
